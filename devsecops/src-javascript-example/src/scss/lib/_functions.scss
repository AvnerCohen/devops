//  -----------------------------
//  Sizing
//  -----------------------------

/**
  Generate size from base and multiplier
 */
@function size($multiply: 1) {
  @return $space-base * $multiply;
}

/**
  Get size from given theme declared in $size-themes
 */

@function get-theme-sizes($themeName) {
  $theme: map-get($size-themes, $themeName);

  @if ($theme == null) {
    @error 'No `#{$themeName}` theme declared in $size-themes'
  } @else {
    @return $theme;
  }
}

/**
  Get size value for specific dimension of logo type declared in $size-themes
 */
@function get-logo-size($themeName, $logoType, $logoDimension) {
  $theme: get-theme-sizes($themeName);
  $logo: map-get($theme, "logo");

  @if($logo == null) {
    @error 'Missing `logo` in `#{$themeName}` theme in $size-themes'
  }

  $themeLogoSizes: map-get($logo, $logoType);

  @if($themeLogoSizes == null) {
    @error 'Missing `#{$logoType}` type in `logo` of `#{$themeName}` theme declared in $size-themes'
  }

  $logoDimensionSize: map-get($themeLogoSizes, $logoDimension);

  @if($logoDimensionSize == null) {
    @error 'Missing `#{$logoDimension}` in `#{$logoType}` type in `logo` of `#{$themeName}` theme declared in $size-themes'
  }

  @return $logoDimensionSize;
}

//  -----------------------------
//  Colors
//  -----------------------------

@function getCategoryColorName($categoryName) {
  $mappedColor: map-get($category-map, $categoryName);
  @if ($mappedColor != null) {
    @return $mappedColor;
  } @else {
    @return $categoryName;
  }
}


/**
  Get color from given theme declared in $color-themes
 */
@function get-theme-color($themeName, $colorName) {
  $theme: map-get($color-themes, $themeName);

  @if ($theme != null) {
    $color: map-get($theme, $colorName);

    @if ($color != null) {
      @return $color;

    } @else {
      @error 'No `#{$colorName}` color declared in `#{$themeName}` theme.'
    }

  } @else {
    @error 'No `#{$themeName}` theme declared in $color-themes'
  }
}

//  Helper function to replace characters in a string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @return if($index,
    str-slice($string, 1, $index - 1) + $replace +
        str-replace(str-slice($string, $index +
        str-length($search)), $search, $replace),
    $string);
}

//  Function to create an optimized svg url
@function svg-url($svg){
  //
  //  Add missing namespace
  //
  @if not str-index($svg,xmlns) {
    $svg: str-replace($svg, '<svg','<svg xmlns="http://www.w3.org/2000/svg"');
  }
  //
  //  Chunk up string in order to avoid
  //  "stack level too deep" error
  //
  $encoded:'';
  $slice: 2000;
  $index: 0;
  $loops: ceil(str-length($svg)/$slice);
  @for $i from 1 through $loops {
    $chunk: str-slice($svg, $index, $index + $slice - 1);
    //
    //   Encode
    //
    $chunk: str-replace($chunk,'"', '\'');
    $chunk: str-replace($chunk,'%', '%25');
    $chunk: str-replace($chunk,'&', '%26');
    $chunk: str-replace($chunk,'#', '%23');
    $chunk: str-replace($chunk,'{', '%7B');
    $chunk: str-replace($chunk,'}', '%7D');
    $chunk: str-replace($chunk,'<', '%3C');
    $chunk: str-replace($chunk,'>', '%3E');

    $encoded: #{$encoded}#{$chunk};
    $index: $index + $slice;
  }
  @return url("data:image/svg+xml,#{$encoded}");
}
